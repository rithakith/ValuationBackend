// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ValuationBackend.Data;

#nullable disable

namespace ValuationBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ValuationBackend.Models.InspectionBuilding", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AgeYears")
                    .HasColumnType("text");

                b.Property<string>("BathroomToilet")
                    .HasColumnType("text");

                b.Property<string>("BathroomToiletDoorsFittings")
                    .HasColumnType("text");

                b.Property<string>("BuildingCategory")
                    .HasColumnType("text");

                b.Property<string>("BuildingClass")
                    .HasColumnType("text");

                b.Property<string>("BuildingConditions")
                    .HasColumnType("text");

                b.Property<string>("BuildingId")
                    .HasColumnType("text");

                b.Property<string>("BuildingName")
                    .HasColumnType("text");

                b.Property<string>("Ceiling")
                    .HasColumnType("text");

                b.Property<string>("Condition")
                    .HasColumnType("text");

                b.Property<string>("Conveniences")
                    .HasColumnType("text");

                b.Property<string>("Design")
                    .HasColumnType("text");

                b.Property<string>("DetailOfBuilding")
                    .HasColumnType("text");

                b.Property<string>("Door")
                    .HasColumnType("text");

                b.Property<string>("ExpectedLifePeriodYears")
                    .HasColumnType("text");

                b.Property<string>("FloorFinisher")
                    .HasColumnType("text");

                b.Property<string>("FloorStructure")
                    .HasColumnType("text");

                b.Property<string>("FoundationStructure")
                    .HasColumnType("text");

                b.Property<string>("HandRail")
                    .HasColumnType("text");

                b.Property<int>("InspectionReportId")
                    .HasColumnType("integer");

                b.Property<string>("NatureOfConstruction")
                    .HasColumnType("text");

                b.Property<string>("NoOfFloorsAboveGround")
                    .HasColumnType("text")
                    .HasColumnName("NoOfFloorsAboveGround");

                b.Property<string>("NoOfFloorsBelowGround")
                    .HasColumnType("text")
                    .HasColumnName("NoOfFloorsBelowGround");

                b.Property<string>("OtherDoors")
                    .HasColumnType("text");

                b.Property<string>("PantryCupboard")
                    .HasColumnType("text");

                b.Property<string>("ParkingSpace")
                    .HasColumnType("text");

                b.Property<string>("RoofFinisher")
                    .HasColumnType("text");

                b.Property<string>("RoofFrame")
                    .HasColumnType("text");

                b.Property<string>("RoofMaterial")
                    .HasColumnType("text");

                b.Property<string>("Services")
                    .HasColumnType("text");

                b.Property<string>("Structure")
                    .HasColumnType("text");

                b.Property<string>("WallFinisher")
                    .HasColumnType("text");

                b.Property<string>("WallStructure")
                    .HasColumnType("text");

                b.Property<string>("Window")
                    .HasColumnType("text");

                b.Property<string>("WindowProtection")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("InspectionReportId");

                b.ToTable("InspectionBuildings");
            });

            modelBuilder.Entity("ValuationBackend.Models.BuildingRatesLA", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AssessmentNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("ConstructedBy")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Cost")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("DescriptionOfProperty")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("FloorAreaSQFT")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLatitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLongitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Owner")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RatePerSQFT")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Remarks")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("YearOfConstruction")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("BuildingRatesLA", (string)null);
            });

            modelBuilder.Entity("ValuationBackend.Models.InspectionReport", b =>
            {
                b.Property<int>("InspectionReportId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InspectionReportId"));

                b.Property<string>("DetailsOfAssestsInventoryItems")
                    .HasColumnType("text")
                    .HasColumnName("DetailsOfAssestsInventoryItems");

                b.Property<string>("DetailsOfBusiness")
                    .HasColumnType("text");

                b.Property<string>("District")
                    .HasColumnType("text");

                b.Property<string>("DsDivision")
                    .HasColumnType("text");

                b.Property<string>("GnDivision")
                    .HasColumnType("text");

                b.Property<DateTime>("InspectionDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("MasterFileRefNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("OtherConstructionDetails")
                    .HasColumnType("text");

                b.Property<string>("OtherInformation")
                    .HasColumnType("text");

                b.Property<string>("Province")
                    .HasColumnType("text");

                b.Property<string>("Remark")
                    .HasColumnType("text");

                b.Property<int>("ReportId")
                    .HasColumnType("integer");

                b.Property<string>("Village")
                    .HasColumnType("text");

                b.HasKey("InspectionReportId");

                b.HasIndex("ReportId");

                b.ToTable("InspectionReports");
            });

            modelBuilder.Entity("ValuationBackend.Models.ConditionReport", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AccessCategory")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AccessCategoryDescription")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AcquiredExtent")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AcquiringOfficerSignature")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AcquisitionName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AssessmentNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AtLotNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("AtPlanNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BoundaryBottom")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BoundaryEast")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BoundaryNorth")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BoundarySouth")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BoundaryWest")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BuildingDescription")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("BuildingInfo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("ChiefValuerRepresentativeSignature")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("DateOfSection3BA")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DatePrepared")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DepthOfLand")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DescriptionOfLand")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DetailsOfBusiness")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Frontage")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("GramasewakaSignature")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LandUseDescription")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LandUseType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LevelWithAccess")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("NameOfTheLand")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("NameOfTheVillage")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("OtherConstructionsDescription")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("OtherConstructionsInfo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PlantationDetails")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PpCadLotNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PpCadNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RoadName")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("ConditionReports");
            });

            modelBuilder.Entity("ValuationBackend.Models.LandMiscellaneousMasterFile", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<int>("MasterFileNo")
                    .HasColumnType("integer");

                b.Property<string>("PlanNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PlanType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RequestingAuthorityReferenceNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Status")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("LandMiscellaneousMasterFiles");
            });

            modelBuilder.Entity("ValuationBackend.Models.PastValuationsLA", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("DateOfValuation")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Extent")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("FileNoGNDivision")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLatitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLongitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileRefNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PlanOfParticulars")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PurposeOfValuation")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Rate")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RateType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Remarks")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Situation")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("PastValuationsLA", (string)null);
            });

            modelBuilder.Entity("ValuationBackend.Models.RatingRequest", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("LocalAuthority")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RatingReferenceNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RequestType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Status")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("YearOfRevision")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.ToTable("RatingRequests");
            });

            modelBuilder.Entity("ValuationBackend.Models.Report", b =>
            {
                b.Property<int>("ReportId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("ReportType")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("character varying(50)");

                b.Property<DateTime>("Timestamp")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("ReportId");

                b.ToTable("Reports");
            });

            modelBuilder.Entity("ValuationBackend.Models.RentalEvidenceLA", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AssessmentNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("FloorRateSQFT")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("HeadOfTerms")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLatitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLongitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileRefNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Occupier")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Owner")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RatePerMonth")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RatePerSqft")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Remarks")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Situation")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.HasKey("Id");

                b.ToTable("RentalEvidencesLA", (string)null);
            });

            modelBuilder.Entity("ValuationBackend.Models.SalesEvidenceLA", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer");

                NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                b.Property<string>("AssetNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Consideration")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("DeedAttestedNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DeedNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("DescriptionOfProperty")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Extent")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("FloorRate")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LandRegistryReferences")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLatitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LocationLongitude")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("LotNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("MasterFileRefNo")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("NotaryName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Occupier")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Owner")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PlanDate")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PlanNumber")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Rate")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("RateType")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Remarks")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Road")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Situation")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("Vendor")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Village")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("SalesEvidencesLA", (string)null);
            });

            modelBuilder.Entity("ValuationBackend.Models.InspectionBuilding", b =>
            {
                b.HasOne("ValuationBackend.Models.InspectionReport", "InspectionReport")
                    .WithMany("Buildings")
                    .HasForeignKey("InspectionReportId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("InspectionReport");
            });

            modelBuilder.Entity("ValuationBackend.Models.InspectionReport", b =>
            {
                b.HasOne("ValuationBackend.Models.Report", "Report")
                    .WithMany()
                    .HasForeignKey("ReportId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Report");

                // This configures the navigation property on InspectionReport side
                b.Navigation("Buildings");
            });
#pragma warning restore 612, 618
        }
    }
}